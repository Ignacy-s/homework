Fri 27 Nov 2020 11:11:43 PM CET
Homework for a Gniezno Tech Highschool student, who asked for help.

Solving first 7 exercises to show how to write basic scripts in bash.

* 1. Napisać skrypt wyświetlający zawartość katalogu podanego jako pierwszy parameter wywołania. Jeśli parametr nie zostanie podany, należy wyświetlić informacje o poprawnej składni polecenia.

** Komentarz:
Polecenie nawiązuje do dobrej praktyki informowania użytkownika
błędnie używającego naszego programu o tym jak powinien go prawidłowo
wywołać. Powinien przypominać wyniki zwykłych bashowych komend gdy
podamy im złe dane. Spróbuj wpisać `cp` bez argumentów i zobacz co
pokazuje:

#+BEGIN_SRC bash
igi@dragon:~/Coding/praca_domowa/gniezno$ cp
cp: missing file operand
Try 'cp --help' for more information.
#+END_SRC

** Wymagane rozdziały z instrukcji:

Wymagane informacje teoretycznie znajdują się w instrukcji, ale
brakuje w niej listy podstawowych komend i przykładów ich
użycia. Można odgadnąć z rozdziału drugiego, że `ls -la` służy do
wyświetlania zawartości katalogów.

Poza tym 2. polecenie echo, 4. $# - specjalny parametr zawierający
listę argumentów aktualnie działającego (naszego) skryptu, 8. if -
składnia użycia ifa w bashu.

** Jak ulepszyć skrypt:
*** Sprawdzić, czy $1 jest directory.
** Co robi skrypt krok po kroku:
#+BEGIN_SRC bash
    #!/bin/bash
    ## Mówi systemowi jakiego interpretera użyć do odpalania skryptu, czyli
    ## że jest to skrypt bashowy. W przypadku skryptu pythonowego
    ## zastąpilibyśmy bash python3'em. (chyba tak, może python być gdzieś
    ## indziej, bo /bin/bash to po prostu ścieżka do pliku wykonującego ).
    ## 
    ## Musi być na początku każdego skryptu.

    ## Na początku każdego skryptu powinna się znajdować data stworzenia,
    ## edycji, autor i cel skryptu. Po odstępie można dokładniej opisać
    ## działanie skryptu, tutaj działanie ładnie opisane jest przez treść
    ## polecenia zadania.

    # Napisać skrypt wyświetlający zawartość katalogu podanego jako
    # pierwszy parameter wywołania. Jeśli parametr nie zostanie podany,
    # należy wyświetlić informacje o poprawnej składni polecenia.


    # Check if there is at least one argument.
    ## Skrypt powinien zawierać komentarze mówiące co aktualnie robi,
    ## dostosowane do poziomu piszącego i odbiorcy. Skrypt pisany dla
    ## kogoś nowego powinien tłumaczyć trochę więcej, żeby odbiorca nie
    ## miał problemów ze zrozumieniem tego co skrypt robi. Dobrą praktyką
    ## jest założenie, że odbiorca jest inteligentny i kompetentny, wtedy
    ## komentarzy byłoby znacznie mniej.
    if [[ $# -gt 0 ]]; then
    ## instrukcja warunkowa if. Po ifie może znajdować się nie tylko
    ## wyrażenie logiczne w formie testu, jak wyżej, ale także komenda. Na
    ## przykład, żeby wykonać coś tylko jeżeli nie możemy spingować
    ## 8.8.8.8 napiszemy `if ! ping 8.8.8.8; then` bo ping zwróci
    ## "fałszywą" odpowiedź, a "!" to odwróci, więc warunek będzie
    ## spełniony gdy ping zwróci coś innego niż 0. Programy zwracają 0
    ## jeśli się dobrze wykonają.  [[ - w bashu powinniśmy używać [[ bo to
    ## ulepszony [ i ma trochę więcej opcji. Do porównywania liczb używamy
    ## "-gt" (greater), a nie ">", jak przypomniał mi shellcheck.
      # Run ls with -la options to show what's in $1
      ls -la "$1" || {
      ## Do tego punktu dojdziemy tylko jeżeli skrypt dostał
      ## przynajmniej jeden argument. Wtedy nie sprawdzając czy argument
      ## jest jakąś lokalizacją czy czymś innym odpalamy na nim ls. Po
      ## ls są parametry -la. W skróconej formie (po jednym -) parametry
      ## mogą być łączone (wszystko łącznie z tylko pierwszym
      ## poprzedonym minusem), o ile nie mają argumentów. Parametr,
      ## który musi mieć argument może wystąpić jako ostatni.  "$1" każe
      ## bashowi wstawić w to miejsce treść zmiennej o nazwie 1, która
      ## jest pierwszym argumentem skryptu. Shellcheck słusznie kazał
      ## wziąć $1 w nawias, bo gdyby argument zawierał spację, to bash
      ## podzieliłby go przed podaniem ls. I wtedy zamiast sprawdzić
      ## zawartość lokalizacji zawierającą w nazwie spację, sprawdziłby
      ## kilka lokalizacji. Używanie cudzysłowów w bashu w celu
      ## zapobiegania rozczłonkowywaniu argumentów jest bardzo ważne, aż
      ## tak ważne, że shellcheck zwraca żółty a nie zielony
      ## błąd. Program się raczej uruchomi, ale jego skutki są nie do
      ## przewidzenia bez cudzysłowa.
	echo \
	##
	  "Błąd ls. Czy na pewno podałeś prawidłową lokalizację?"
	exit 1
	## exit kończy działanie programu. Możesz przeczytać dłuższy opis
	## exit wpisując `help exit` w konsoli:
	## $ help exit
	## exit: exit [n]
	##    Exit the shell.
	##    
	##    Exits the shell with a status of N.  If N is omitted, the
	##    exit status is that of the last command executed.  To
	##    znaczy, że exit nie tylko kończy działanie skryptu, ale
	##    jeszcze zwraca tzw. exit code, którego możemy użyć żeby
	##    sprawdzić czy skrypt wykonał się poprawnie. Żeby sprawdzić
	##    jaki był exit code ostatniej komendy napiszemy w konsoli
	##    `echo $?`. W tym wypadku miał miejsce błąd, bo ls zwróciło
	##    coś innego niż 0. Dzięki temu, że ls zwraca coś w zależności
	##    od tego jak mu poszło możemy zareagować. Gdyby zamienić ||
	##    na &&, to kod po && uruchomiłby się tylko, jeżeli poprzednia
	##    komenda zakończyła się sukcesem.
      }
	# If ls returns an error, inform the user.  || means to run what's
	# after || only if the thing before fails.  \ backslash makes the
	# line continue into the next line. This way we can put echo and
	# it's message in separate lines and keep the script more readable
	# by not exceeding the standard 80 characters width.
	# { starts a codeblock. In this case || would normally allow only
	# one line to execute if ls fails. We want to execute two lines,
	# so we have to put them in a code block. This will make both of
	# them execute if ls fails.
    else
      # Less than 1 argument given to the script.
      echo "Podaj chociaz jeden argument będący lokalizacją."
      exit 1
    fi

  ## Jeżeli tutaj doszliśmy, to znaczy, że skrypt wykonał się
  ## pomyślnie. Teoretycznie nie musimy pisać tego 0, gdyż bez niego
  ## zwrócony byłby $? wynik ls, który musiał byc pozytywny, bo inaczej
  ## zadziałałby komunikat o błędzie. Używanie || po komendach w
  ## skrypcie to najlepszy sposób na reagowanie na błędy. Co jeżeli
  ## chciałeś utworzyć nowy folder w folderze domowym, ale ci się nie
  ## udało i skrypt zamiast przerwać, zacznie robić to co miał robić w
  ## tym nowym folderze, ale w twoim folderze domowym, potencjalnie
  ## kasując ważne dane? Innym akceptowalnym sposobem jest `if [[ $? -ne
  ## 0]]; then komendy` albo samo `[[ $? -ne 0 ]] && komendy`, bo
  ## przecież `[[` tak naprawdę działa tak, że zwraca 0 lub 1 w
  ## zależności od tego czy warunek logiczny został spełniony. Stary
  ## `[[`, `[` tak naprawdę nie był funkcją wbudowaną basha, a osobnym
  ## programem o nazwie `test` i dalej możesz go użyć jeśli chcesz.
    exit 0
#+END_SRC
* 2. Napisz skrypt wyświetlający w kolejnych liniach argumenty przekazane do skryptu. Skrypt napisać w trzech wariantach: pierwszy z wykorzystaniem pętli for, drugi – pętli while i trzeci – petli until.

** Komentarz:
Zadanie z pętlami. Dwa różne podejścia do pętli. Pierwsze (for), gdy z
góry wiemy na czym mamy operować. Drugie (while), gdy chcemy naszej
pętli podawać dane po kroku. Trzecia pętla (until) jest wariantem
while gdzie warunek jest zanegowany (!), czyli kolejny krok wykonuje
się tak długo jak warunek jest fałszywy.

** Wymagane rozdziały z instrukcji:
4. parametry wywołania $1,$2...
4. polecenie `shift`: Parametry $1 ... $9 można przesuwać w lewo za
   pomocą polecenia shift. Po wydaniu tego polecenia parametr $1
   przyjmie wartość parametru $2, $2 będzie miał wartość parametru $3,
   ..., $8 będzie maił wartość parametru $9, a $9 będzie miał wartość
   pustą.
4. $@ - wypisanie wszystkich parametrów przekazanych do skryptu.

** Co robi skrypt krok po kroku:
*** for
#+BEGIN_SRC bash
  # A for loop operating on all arguments expanded with $@.
  for i in "$@"; do
  ## for tworzy zmienną o nazwie i (nazwa może być dowolna, najczęściej
  ## używa się i oraz j jako iteratorów), zmienna ta jest dostępna
  ## wewnątrz pętli i przy każdym odpaleniu pętli jej zawartość jest
  ## wypełniana następnym elementem z listy obiektów. 

  ## "$@" (cudzysłów bardzo ważny!!) jest magicznym parametrem. W jego
  ## miejsce bash podstawi wszystkie argumenty skryptu. Podobne
  ## działanie ma "$*", jednak "$@" ma tę zaletę, że każdy z parametrów
  ## zostanie oddzielnie umieszczony w cudzysłowie, co pozwoli uniknąć
  ## dodatkowej zabawy dostarczonej automatycznie przez bash w momencie
  ## użycia argumentów zawierających spację (tj. argumenty ze spacją w
  ## środku jak np nazwy folderów, nie zostaną rozdzielone na więcej
  ## argumentów bo spacja będzie potraktowana tak jak część nazwy a nie
  ## odstęp między kolejnymi argumentami).

  ## ; jest znakiem końca linii. np linijka: echo 1; echo 2; echo 3; to
  ## tak naprawdę 3 linijki dla basha. Dzięki ; możemy umieścić w tej
  ## samej linii coś, co według zasad składni basha powinno znajdować
  ## się w linii następnej, jak na przykład słowa kluczowe oznaczające
  ## początek i koniec loopa. Średnika można nie pisac, ale wtedy do
  ## powinno znajdować się w natępnej linii. Czasem rzeczy można robić
  ## na kilka sposobów. Ważne, by być konsekwentnym i przynajmniej w
  ## obrębie tego samego skryptu robić rzeczy w ten sam sposób. Pomaga
  ## to w czytelności, co jest bardzo ważne. Skrypty bashowe można
  ## zastąpić szybciej wykonującym się programem, ale tu ważniejsza od
  ## czasu jest możliwość łatwego zrozumienia kodu i łatwej modyfikacji.
    echo "$i"
    ## w tym wypadku echo za każdym razem wypisze inną treść, bo przy
    ## każdym okrążeniu pętli `i` będzie zawierało inną wartość.
  done
#+END_SRC

*** while/until
#+BEGIN_SRC bash
    # Until loop until there are not arguments left.
    until [[ $# -eq 0 ]]; do
    ## Pętla while/until ma inną formę. Na jej początku znajduje się
    ## wyrażenie logiczne, które jest ewaluowane za każdym razem gdy ma
    ## zacząć się następne okrążenie pętli. Jeżeli wyrażenie logiczne
    ## zanegujemy przy użyciu '!', to pętla while zmieni się w until i
    ## vice versa. `while [[ $# -eq 0 ]]` to to samo co 'until [[ ! ( $#
    ## -eq 0 ) ]]`. Prawdopodobnie tak samo zadziała bez nawiasów.
      echo "$1"
      shift
      ## W pętli while/until sami musimy zadbać o zmianę zawartości
      ## zmiennej na miejscu $1. Shift usuwa $1 i na jego miejsce wstawia
      ## $2, na miejsce $2 wstawia $3 itd.
    done
 #+END_SRC


* 3. Wyświetl zawartość plików podanych jako kolejne parametry wywołania pod warunkiem że pliki te istnieją. Jeśli nie został podany żaden plik należy wyświetlić komunikat: „Nie ma czego wyświetlać”. Treści plików należy rozdzielić linią składającą się z samych gwiazdek.

Wiemy już jak użyć pętli. Wyswietlamy pliki pod jakims warunkiem, wiec
trzeba będzie coś sprawdzić ifem. Jezeli nie ma argumentów, to
wyświetlamy komunikat o błędzie.

** Wymagane rozdziały z instrukcji:
pętla, if (czy plik istnieje), liczba argumentow $#, echo


